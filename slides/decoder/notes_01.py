from manim import *

import sys
sys.path.append("..") 
from manim_functions import *

class generate(Scene):
    def construct(self):
        self.camera.background_color = BLACK

        data = [
            ["Input Words", "Words in the target language (Portuguese) translating the source input. In our case, it is only one word: REFR√ÉO, the decoder also must always start with <SOS>."],
            ["<SOS>", "Start of Sequence token that marks the beginning of the input or output sequence."],
            ["<EOS>", "End of Sequence token. Note: it is not present here because in the decoder input (target language) we do not include the <EOS> token."],
            ["<PAD>", "Padding token used to make all sequences in a batch the same length, by filling shorter sequences with <PAD> until they reach the maximum length. In our transformer configuration, the sequence length is always fixed to 3."],
            ["Portuguese Tokenizer", "Tokenizer trained on a Portuguese corpus, where each word is represented as a token in its vocabulary."],
            ["Input Tokens", "Tokens corresponding to the input words, generated by the Portuguese tokenizer trained on its corpus."],
            ["Embedding Map", "Map including all tokens from the tokenizer, converting each one into a fixed-dimension vector in embedding space that captures semantic and syntactic meaning."],
            ["Embedding Input", "Representation of each input token in the embedding map."],
            ["Scale","Multiplication by the square root of the embedding dimension."]
        ]


        scene = glossary(data)
        self.play(Create(scene[0]))   
        self.play(FadeIn(scene[1]))   
        self.wait(200)