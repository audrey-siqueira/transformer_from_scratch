from manim import *

import sys
sys.path.append("..") 
from manim_functions import *

class generate(Scene):
    def construct(self):
        self.camera.background_color = BLACK

        data = [
            ["Input Words", "Words in the source language (English) to be translated into (Portuguese). In our case, it is only one word: CHORUS, the encoder must always start with <SOS> and end with <EOS>."],
            ["<SOS>", "Start of Sequence token that marks the beginning of the input or output sequence."],
            ["<EOS>", "End of Sequence token that marks the end of the input or output sequence."],
            ["English Tokenizer", "Tokenizer trained on an English corpus, where each word is represented as a token in its vocabulary."],
            ["Input Tokens", "Tokens corresponding to the input words, generated by the English tokenizer trained on its corpus."],
            ["Embedding Map", "Map including all tokens from the tokenizer, converting each one into a fixed-dimension vector in embedding space that captures semantic and syntactic meaning."],
            ["Embedding Input", "Representation of each input token in the embedding map."],
            ["Scale","Multiplication by the square root of the embedding dimension."]
        ]


        scene = glossary(data)
        self.play(Create(scene[0]))   
        self.play(FadeIn(scene[1]))   
        self.wait(200)